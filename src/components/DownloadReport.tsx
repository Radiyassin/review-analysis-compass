
import React from 'react';
import { Button } from '@/components/ui/button';
import { Download } from 'lucide-react';

const DownloadReport = () => {
  const handleDownload = async () => {
    console.log('ðŸ“„ DownloadReport: Starting PDF generation...');
    
    try {
      // Get all the analysis data from dataStore
      if (!window.dataStore) {
        alert('No analysis data available for download');
        return;
      }

      const allData = window.dataStore.getAllData();
      console.log('ðŸ“„ DownloadReport: Retrieved data:', allData);

      if (!allData.analysisComplete) {
        alert('Please complete the analysis first before downloading the report');
        return;
      }

      // Create a simple text-based report
      const reportContent = generateReportContent(allData);
      
      // Create and download as text file (since we don't have PDF library)
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `sentiment-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      console.log('ðŸ“„ DownloadReport: Report downloaded successfully');
    } catch (error) {
      console.error('ðŸ“„ DownloadReport: Error generating report:', error);
      alert('Failed to generate report. Please try again.');
    }
  };

  const generateReportContent = (data: any) => {
    const currentDate = new Date().toLocaleDateString();
    
    return `
SENTIMENT ANALYSIS REPORT
Generated on: ${currentDate}

===============================
PRODUCT INFORMATION
===============================
Product Name: ${data.productInfo?.['Product Name'] || 'N/A'}
Brand Name: ${data.productInfo?.['Brand Name'] || 'N/A'}
Price: ${data.productInfo?.['Price'] || 'N/A'}

===============================
SENTIMENT ANALYSIS RESULTS
===============================
Overall Sentiment Score: ${data.sentimentScore || 'N/A'}/5

Sales Trend: ${data.salesTrend?.trend || 'N/A'}
Average Sentiment: ${data.salesTrend?.avg_sentiment || 'N/A'}
Trend Message: ${data.salesTrend?.message || 'N/A'}

===============================
CHART DATA SUMMARY
===============================
${data.chartData?.sentiment ? `
Sentiment Scores:
- Positive: ${data.chartData.sentiment.means?.[0]?.toFixed(2) || 'N/A'}
- Negative: ${data.chartData.sentiment.means?.[1]?.toFixed(2) || 'N/A'}
` : ''}

${data.chartData?.distribution ? `
Review Distribution:
- Positive: ${data.chartData.distribution.values?.[0] || 0}
- Neutral: ${data.chartData.distribution.values?.[1] || 0}
- Negative: ${data.chartData.distribution.values?.[2] || 0}
` : ''}

${data.chartData?.counts ? `
Review Counts:
- Positive Reviews: ${data.chartData.counts.values?.[0] || 0}
- Negative Reviews: ${data.chartData.counts.values?.[1] || 0}
` : ''}

===============================
COMMON PHRASES
===============================
${data.commonPhrases && Array.isArray(data.commonPhrases) ? 
  data.commonPhrases.map((phrase: any, index: number) => 
    `${index + 1}. ${typeof phrase === 'string' ? phrase : phrase.phrase || phrase.text || 'N/A'}`
  ).join('\n') : 'No common phrases available'}

===============================
REPORT END
===============================

This report was generated by the Sentiment Analysis Dashboard.
For more detailed analysis, please use the interactive dashboard.
    `.trim();
  };

  return (
    <div className="text-center pt-8">
      <Button 
        onClick={handleDownload}
        className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
      >
        <Download className="h-5 w-5 mr-2" />
        Download Product Report (TXT)
      </Button>
    </div>
  );
};

export default DownloadReport;
